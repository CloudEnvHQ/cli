#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cloudenv_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv - CloudEnv\n"
    echo 
  else
    printf "cloudenv - CloudEnv\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cloudenv [command]\n"
  printf "  cloudenv [command] --help | -h\n"
  printf "  cloudenv --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  login     Login to CloudEnv service"
  echo "  init      Initialize a new project"
  echo "  merge     Merge into CloudEnv"
  echo "  edit      Edit an environmental variable file"
  echo "  source    Provide a source for configuring environment variables"
  echo "  show      Show an environmental variable file"
  echo "  raw       Show raw encrypted data for an environment"
  echo "  decrypt   Decrypt a raw data dump"
  echo "  push      Push an existing environmental variable file"
  echo "  run       Run a command using some environmental variables"
  echo "  upgrade   Upgrade the cloudenv cli"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  API_KEY"
    printf "    Set your API key\n"
    echo

  fi
}

# :command.usage
cloudenv_login_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv login - Login to CloudEnv service\n"
    echo 
  else
    printf "cloudenv login - Login to CloudEnv service\n"
    echo 
  fi

  printf "Shortcut: l\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv login\n"
  printf "  cloudenv login --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv login\n"
    echo

  fi
}

# :command.usage
cloudenv_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv init - Initialize a new project\n"
    echo 
  else
    printf "cloudenv init - Initialize a new project\n"
    echo 
  fi

  printf "Shortcut: i\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv init [options]\n"
  printf "  cloudenv init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --name, -n NAME"
    printf "    Name of the project\n"
    echo

  fi
}

# :command.usage
cloudenv_merge_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv merge - Merge into CloudEnv\n"
    echo 
  else
    printf "cloudenv merge - Merge into CloudEnv\n"
    echo 
  fi

  printf "Shortcut: m\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv merge ENVIRONMENT FILENAME\n"
  printf "  cloudenv merge --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    echo
    
    # :argument.usage
    echo "  FILENAME"
    printf "    Target filename of existing env file\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv merge default .env\n"
    printf "  cloudenv merge development .env.dev\n"
    echo

  fi
}

# :command.usage
cloudenv_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv edit - Edit an environmental variable file\n"
    echo 
  else
    printf "cloudenv edit - Edit an environmental variable file\n"
    echo 
  fi

  printf "Shortcut: e\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv edit [ENVIRONMENT]\n"
  printf "  cloudenv edit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    printf "    Default: default\n"
    echo

  fi
}

# :command.usage
cloudenv_source_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv source - Provide a source for configuring environment variables\n"
    echo 
  else
    printf "cloudenv source - Provide a source for configuring environment variables\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cloudenv source [ENVIRONMENT]\n"
  printf "  cloudenv source --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    printf "    Default: default\n"
    echo

  fi
}

# :command.usage
cloudenv_show_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv show - Show an environmental variable file\n"
    echo 
  else
    printf "cloudenv show - Show an environmental variable file\n"
    echo 
  fi

  printf "Shortcut: s\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv show [ENVIRONMENT]\n"
  printf "  cloudenv show --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    printf "    Default: default\n"
    echo

  fi
}

# :command.usage
cloudenv_raw_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv raw - Show raw encrypted data for an environment\n"
    echo 
  else
    printf "cloudenv raw - Show raw encrypted data for an environment\n"
    echo 
  fi

  printf "Shortcut: r\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv raw [ENVIRONMENT]\n"
  printf "  cloudenv raw --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    printf "    Default: default\n"
    echo

  fi
}

# :command.usage
cloudenv_decrypt_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv decrypt - Decrypt a raw data dump\n"
    echo 
  else
    printf "cloudenv decrypt - Decrypt a raw data dump\n"
    echo 
  fi

  printf "Shortcut: d\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv decrypt [FILE]\n"
  printf "  cloudenv decrypt --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  FILE"
    printf "    Which file should be decrypted\n"
    echo

  fi
}

# :command.usage
cloudenv_push_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv push - Push an existing environmental variable file\n"
    echo 
  else
    printf "cloudenv push - Push an existing environmental variable file\n"
    echo 
  fi

  printf "Shortcut: p\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv push [ENVIRONMENT] [FILE]\n"
  printf "  cloudenv push --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    printf "    Default: default\n"
    echo
    
    # :argument.usage
    echo "  FILE"
    printf "    Which file should be pushed\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv push default .env\n"
    printf "  cloudenv push staging .env.staging\n"
    printf "  cloudenv push production .env.production\n"
    echo

  fi
}

# :command.usage
cloudenv_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv run - Run a command using some environmental variables\n"
    echo 
  else
    printf "cloudenv run - Run a command using some environmental variables\n"
    echo 
  fi

  printf "Shortcut: r\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv run [ENVIRONMENT] [COMMAND]\n"
  printf "  cloudenv run --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    printf "    Default: default\n"
    echo
    
    # :argument.usage
    echo "  COMMAND"
    printf "    Name of the command to start\n"
    printf "    Default: default\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv run default your-app-cli-start-command\n"
    printf "  cloudenv run staging your-app-cli-start-command\n"
    printf "  cloudenv run production your-app-cli-start-command\n"
    echo

  fi
}

# :command.usage
cloudenv_upgrade_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv upgrade - Upgrade the cloudenv cli\n"
    echo 
  else
    printf "cloudenv upgrade - Upgrade the cloudenv cli\n"
    echo 
  fi

  printf "Shortcut: u\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv upgrade\n"
  printf "  cloudenv upgrade --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv upgrade\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions
# :command.function
cloudenv_login_command() {
  # :src/login_command.sh
  locked=0
  ip_address=$(curl -s ident.me)
  echo
  ohai "Your current ip address is $ip_address"
  echo
  printf '%s ' 'Do you want to firewall this API token to this IP address (enhanced security on servers)? (N/y):'
  read -r newkey
  echo
  if [[ "$newkey" == "y" ]]
  then
    locked=1
  fi
  
  readonly=0
  echo
  ohai "CloudEnv can prevent writes from this computer"
  echo
  printf '%s ' 'Do you want this API token to be read-only? (N/y):'
  read -r newkey
  echo
  if [[ "$newkey" == "y" ]]
  then
    readonly=1
  fi
  
  hostname > "$tempdir/cloudenv.auth"
  base64 < /dev/urandom | tr -d 'O0Il1+/' | head -c 256 | tr '\n' '1' >> "$tempdir/cloudenv.auth"
  echo >> "$tempdir/cloudenv.auth"
  execute "curl" "-s" "-F" "\"data=@$tempdir/cloudenv.auth\"" "\"$base_url/initauth\""
  
  echo
  ohai "Please visit this url and login or register to authorize this computer: "
  echo
  echo "${tty_underline}$output${tty_reset}"
  echo
  echo
  
  output=1
  i=0
  
  re='^[0-9]+$'
  
  while [[ $output =~ $re ]]
  do
    i=$((i+1))
    execute "curl" "-s" "-F" "\"data=@$tempdir/cloudenv.auth\"" "\"$base_url/checkauth?locked=$locked&readonly=$readonly&ip_address=$ip_address\""
    sleep 2
  done
  
  if [[ $output =~ $re ]]
  then
    warn "Login failed, please try again"
    echo
  else
    email="$(echo "$output" | awk '{print $1}')"
    token="$(echo "$output" | awk '{print $2}')"
    echo "$token" > ~/.cloudenvrc
    ohai "You are now logged in as ${tty_underline}$email${tty_reset}"
    echo
  fi
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_init_command() {
  # :src/init_command.sh
  environment="${args[environment]:-default}"
  
  check_logged_in
  
  if [[ -f .cloudenv-secret-key ]]; then
  	echo
  	warn "Already found an existing CloudEnv project in $PWD/.cloudenv-secret-key"
  	echo
  	printf '%s ' 'Generate a new secret key for this project? (N/y):'
  	read newkey
  	echo
  	if [[ "$newkey" == "y" ]]; then
  		check_can_write_env
  		get_env "default" > "$tempdir/cloudenv-edit-decrypted"
  		if [[ -s "$tempdir/cloudenv-edit-decrypted" ]]
  		then
  			grep "slug" .cloudenv-secret-key > .cloudenv-secret-key-new
  			echo "secret-key" | tr '\n' ':' >> .cloudenv-secret-key-new
  			echo | tr '\n' ' ' >> .cloudenv-secret-key-new
  			base64 < /dev/urandom | tr -d 'O0Il1+/' | head -c 256 | tr '\n' '1' >> .cloudenv-secret-key-new
  			echo >> .cloudenv-secret-key-new
  			mv .cloudenv-secret-key-new .cloudenv-secret-key
  			sha="$(openssl dgst -sha256 .cloudenv-secret-key | awk '{print $2}')"
  			curl -s --data-urlencode "name=$name" --data-urlencode "sha=${ADDR[1]}" --data-urlencode "version=$version" --data-urlencode "lang=cli" -H "Authorization: Bearer $(get_bearer)" "$base_url/api/v1/apps"
  			upload_env "$tempdir/cloudenv-edit-decrypted"
  		else
  			warn "Couldn't find this app in CloudEnv, try deleting $PWD/.cloudenv-secret-key and starting over"
  			echo
  			rm -rf "$tempdir/cloudenv-edit*"
  			exit
  		fi
  		ohai "SUCCESS: New encryption key generated"
  		echo
  		ohai "You need to re-distribute the following file to all your team members and deployment servers"
  		echo
  		echo "$PWD/.cloudenv-secret-key"
  		echo
  		rm -rf "$tempdir/cloudenv-edit*"
  	fi
  else
  	account_number=$(curl -s -H "Authorization: Bearer $(get_bearer)" "$base_url/api/v1/accounts.txt?version=$version&lang=cli" | wc -l | xargs)
  
  	if [[ "$account_number" -gt "1" ]]
  	then
  		echo
  		ohai "Which account would you like this app to be associated with?"
  		echo
  		curl -s -H "Authorization: Bearer $(get_bearer)" "$base_url/api/v1/accounts.txt?version=$version&lang=cli"
  		echo
  		printf '%s' 'Account number (1-'
  		printf '%s' $account_number
  		printf '%s ' '):'
  		read account_number
  		echo
  		ohai "Got it, now let's name your app."
  		echo
  	else
  		echo
  		ohai "Let's name your app."
  		echo
  	fi
  
  	printf '%s ' 'Name of App:'
  	read name
  	# first, replace spaces with dashes
  	slug=${name// /-}
  	# now, clean out anything that's not alphanumeric or a dash
  	slug=${slug//[^a-zA-Z0-9\-]/}
  	# finally, lowercase with TR
  	slug=`echo -n $slug | tr A-Z a-z`
  
    execute "curl" "-s" "--data-urlencode" "\"slug=$slug\"" "--data-urlencode" "\"name=$name\"" "--data-urlencode" "\"version=$version\"" "--data-urlencode" "\"lang=cli\"" "--data-urlencode" "\"account=$account_number\"" "-H" "\"Authorization: Bearer $(get_bearer)"\" "\"$base_url/api/v1/apps"\"
  
  	if [[ "$output" -eq 401 ]] 2> /dev/null
  	then
  		echo
  		warn "ERROR (401): This app name already exists, please choose a different one and try again."
  		rm .cloudenv-secret-key
  		exit
  	fi
  	if [[ "$output" -eq 200 ]] 2> /dev/null
  	then
  		echo
  		warn "ERROR (200): This app name already exists."
  		echo
  		ohai "To get access to the variables, you must get a copy of .cloudenv-secret-key from a team member into this directory"
  		echo
  		exit
  	fi
  	echo "slug: $slug" > .cloudenv-secret-key
  	echo "secret-key" | tr '\n' ':' >> .cloudenv-secret-key
  	echo | tr '\n' ' ' >> .cloudenv-secret-key
  	base64 < /dev/urandom | tr -d 'O0Il1+/' | head -c 256 | tr '\n' '1' >> .cloudenv-secret-key
  	echo >> .cloudenv-secret-key
  	sha="$(openssl dgst -sha256 .cloudenv-secret-key | awk '{print $2}')"
    
    execute "curl" "-s" "--data-urlencode" "\"slug=$slug\"" "--data-urlencode" "\"name=$name\"" "--data-urlencode" "\"version=$version\"" "--data-urlencode" "\"lang=cli\"" "--data-urlencode" "\"account=$account_number\"" "--data-urlencode" "\"sha=${ADDR[1]}\"" "-H" "\"Authorization: Bearer $(get_bearer)"\" "\"$base_url/api/v1/apps"\"
  	if [[ "$output" -eq 200 ]] 2> /dev/null
  	then
  		echo
  		ohai "SUCCESS: You have created the app '$name' in CloudEnv. Try the following command next:"
  		echo
  		echo "EDITOR=nano cloudenv edit"
  		echo
  		ohai "REMEMBER: You need to distribute the following file to all your team members and deployment servers"
  		echo
  		echo "$PWD/.cloudenv-secret-key"
  		echo
  	else
  		if [[ "$output" -eq 401 ]] 2> /dev/null
  		then
  			echo
  			warn "ERROR ($status_code): Authentication error. Please run: cloudenv login"
  			rm .cloudenv-secret-key
  			exit
  		else
  			echo
  			warn "ERROR ($status_code): There was a problem creating app '$name' with slug '$slug'. Please try to create the app at app.cloudenv.com"
  			rm .cloudenv-secret-key
  			exit
  		fi
  	fi
  fi
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_merge_command() {
  # :src/merge_command.sh
  echo "# this file is located in 'src/merge_command.sh'"
  echo "# code for 'cloudenv merge' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cloudenv_edit_command() {
  # :src/edit_command.sh
  environment="${args[environment]}"
  
  check_logged_in
  check_for_project
  check_can_write_env
  
  get_env "$environment"
  
  execute "print_result" ">" "$tempdir/cloudenv-edit-$environment"
  
  execute "cp" "$tempdir/cloudenv-edit-$environment" "$tempdir/cloudenv-orig-$environment"
  
  "$editor" "$tempdir/cloudenv-edit-$environment"
  
  echo
  
  if cmp --silent "$tempdir/cloudenv-edit-$environment" "$tempdir/cloudenv-orig-$environment"
  then
  	warn "No changes detected, nothing uploaded"
  else
  	upload_env "$tempdir/cloudenv-edit-$environment"
  	ohai "Your changes to $(get_current_app) ($environment environment) have been uploaded"
  fi
  
  echo
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_source_command() {
  # :src/source_command.sh
  environment="${args[environment]}"
  
  check_logged_in
  check_for_project
  check_can_read_env
  
  env_file=`mktemp`
  IFS=$'\n'
  re=^\s*[A-Za-z_][A-Za-z0-9_]*=
  
  if [[ "$environment" != "default" ]]
  then
    get_env "default"
    for line in $(print_result); do
      if [[ $line =~ $re ]]; then
        echo "export $line" >> $env_file
      else
        echo "$line" >> $env_file
      fi
    done
  fi
  
  get_env "$environment"
  for line in $(print_result); do
    if [[ $line =~ $re ]]; then
      echo "export $line" >> $env_file
    else
      echo "$line" >> $env_file
    fi
  done
  
  echo ". $env_file && rm $env_file"
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_show_command() {
  # :src/show_command.sh
  environment="${args[environment]}"
  
  check_logged_in
  check_for_project
  check_can_read_env
  
  if [[ "$environment" != "default" ]]
  then
  	get_env "default"
    print_result
  fi
  
  get_env "$environment"
  print_result
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_raw_command() {
  # :src/raw_command.sh
  environment="${args[environment]}"
  
  check_logged_in
  check_for_project
  check_can_read_env
  
  get_encrypted_env "$environment"
  print_result
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_decrypt_command() {
  # :src/decrypt_command.sh
  file="${args[file]}"
  
  decrypt_file "$file"
  print_result
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_push_command() {
  # :src/push_command.sh
  file="${args[file]}"
  environment="${args[environment]}"
  
  check_logged_in
  check_for_project
  check_can_write_env
  
  echo
  
  if [[ -f "$file" ]]
  then
  	upload_env "$file"
  	ohai "Environment $environment in app $(get_current_app) has been updated"
  else
  	warn "File '$file' does not exist"
  	echo
  	echo "Usage: cloudenv push [environment] [filename]"
  fi
  
  echo
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_run_command() {
  # :src/run_command.sh
  command="${args[command]}"
  environment="${args[environment]}"
  
  check_logged_in
  check_for_project
  check_can_read_env
  
  get_env "$environment" > "$tempdir/cloudenv-edit-$environment"
  
  bash -c "source '$tempdir/cloudenv-edit-$environment'; rm -rf $tempdir; $command"
  
  rm -rf "$tempdir"
}

# :command.function
cloudenv_upgrade_command() {
  # :src/upgrade_command.sh
  bash -c "$(curl -fsSL https://app.cloudenv.com/install.sh)"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  login | l )
    action="login"
    shift
    cloudenv_login_parse_requirements "$@"
    shift $#
    ;;    
  
  init | i )
    action="init"
    shift
    cloudenv_init_parse_requirements "$@"
    shift $#
    ;;    
  
  merge | m )
    action="merge"
    shift
    cloudenv_merge_parse_requirements "$@"
    shift $#
    ;;    
  
  edit | e )
    action="edit"
    shift
    cloudenv_edit_parse_requirements "$@"
    shift $#
    ;;    
  
  source )
    action="source"
    shift
    cloudenv_source_parse_requirements "$@"
    shift $#
    ;;    
  
  show | s )
    action="show"
    shift
    cloudenv_show_parse_requirements "$@"
    shift $#
    ;;    
  
  raw | r )
    action="raw"
    shift
    cloudenv_raw_parse_requirements "$@"
    shift $#
    ;;    
  
  decrypt | d )
    action="decrypt"
    shift
    cloudenv_decrypt_parse_requirements "$@"
    shift $#
    ;;    
  
  push | p )
    action="push"
    shift
    cloudenv_push_parse_requirements "$@"
    shift $#
    ;;    
  
  run | r )
    action="run"
    shift
    cloudenv_run_parse_requirements "$@"
    shift $#
    ;;    
  
  upgrade | u )
    action="upgrade"
    shift
    cloudenv_upgrade_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    cloudenv_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_login_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_login_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="login"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_init_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_init_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="init"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --name | -n )
      if [[ $2 && $2 != -* ]]; then
        args[--name]="$2"
        shift
        shift
      else
        printf "%s\n" "--name requires an argument: --name, -n NAME"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_merge_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_merge_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="merge"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[environment]=$1
    shift
  else
    printf "missing required argument: ENVIRONMENT\nusage: cloudenv merge ENVIRONMENT FILENAME\n"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[filename]=$1
    shift
  else
    printf "missing required argument: FILENAME\nusage: cloudenv merge ENVIRONMENT FILENAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      elif [[ ! ${args[filename]} ]]; then
        args[filename]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_edit_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_edit_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="edit"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[environment]} ]] || args[environment]="default"
}

# :command.parse_requirements
cloudenv_source_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_source_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="source"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[environment]} ]] || args[environment]="default"
}

# :command.parse_requirements
cloudenv_show_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_show_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="show"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[environment]} ]] || args[environment]="default"
}

# :command.parse_requirements
cloudenv_raw_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_raw_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="raw"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[environment]} ]] || args[environment]="default"
}

# :command.parse_requirements
cloudenv_decrypt_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_decrypt_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="decrypt"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[file]} ]]; then
        args[file]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_push_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_push_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="push"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      elif [[ ! ${args[file]} ]]; then
        args[file]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[environment]} ]] || args[environment]="default"
}

# :command.parse_requirements
cloudenv_run_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_run_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="run"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      elif [[ ! ${args[command]} ]]; then
        args[command]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[environment]} ]] || args[environment]="default"
  [[ -n ${args[command]} ]] || args[command]="default"
}

# :command.parse_requirements
cloudenv_upgrade_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_upgrade_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="upgrade"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.initialize
initialize() {
  version="0.2.4"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
  
  base_url=${CLOUDENV_BASE_URL:-https://app.cloudenv.com}
  debug=${DEBUG:-0}
  
  tempdir=$(mktemp -d)
  editor="${EDITOR:-nano}"
  
  get_encrypted_env() {
    env=${1:-default}
    execute curl -s -H "'Authorization: Bearer $(get_bearer)'" "$base_url/api/v1/envs?name=$(get_current_app)&environment=$env&version=$version&lang=cli"
  }
  
  get_env() {
    env=${1:-default}
    encrypted_file=$(mktemp)
    get_encrypted_env "$env"
    echo "$output" | tr -d '\n' > "$encrypted_file"
    if [ -s "$encrypted_file" ]; then
      echo "$output" > "$encrypted_file"
      decrypt_file "$encrypted_file"
    else
      output=""
    fi
  }
  
  encrypt_env() {
    execute openssl enc -a -aes-256-cbc -md sha512 -pass "pass:\"$(get_current_secret)\"" -in "$1" "2>" /dev/null
  }
  
  decrypt_file() {
    execute openssl enc -a -aes-256-cbc -md sha512 -d -pass "pass:\"$(get_current_secret)\"" -in "$1" "2>" /dev/null
  }
  
  upload_env() {
    encrypted_file=$(mktemp)
    encrypt_env "$1"
    print_result > "$encrypted_file"
    execute curl -s -H "'Authorization: Bearer $(get_bearer)'" -F "data=@$encrypted_file" "$base_url/api/v1/envs?name=$(get_current_app)&environment=$environment&version=$version&lang=cli" ">" /dev/null
    rm -rf "$encrypted_file"
  }
  
  get_bearer() {
    if [[ -n "$CLOUDENV_API_TOKEN" ]]; then
      echo "$CLOUDENV_API_TOKEN"
    elif [[ -f ~/.cloudenvrc ]]; then
        tr -d " \t\n\r" < ~/.cloudenvrc
    fi
  }
  
  get_current_app() {
    if [[ -n "$CLOUDENV_APP_SLUG" ]]; then
      echo "$CLOUDENV_APP_SLUG"
    elif [[ -f .cloudenv-secret-key ]]; then
        grep "slug: " .cloudenv-secret-key | awk '{print $2}'
    fi
  }
  
  get_current_secret() {
    if [[ -n "$CLOUDENV_APP_SECRET_KEY" ]]; then
      echo "$CLOUDENV_APP_SECRET_KEY"
    elif [[ -f .cloudenv-secret-key ]]; then
        grep "secret-key: " .cloudenv-secret-key | awk '{print $2}'
    fi
  }
  
  print_result() {
    echo "$output"
  }
  
  # string formatters
  if [[ -t 1 ]]; then
    tty_escape() { printf "\033[%sm" "$1"; }
  else
    tty_escape() { :; }
  fi
  tty_mkbold() { tty_escape "1;$1"; }
  tty_underline="$(tty_escape "4;39")"
  tty_blue="$(tty_mkbold 34)"
  tty_red="$(tty_mkbold 31)"
  tty_bold="$(tty_mkbold 39)"
  tty_reset="$(tty_escape 0)"
  
  shell_join() {
    local arg
    printf "%s" "$1"
    shift
    for arg in "$@"; do
      printf " "
      printf "%s" "${arg// /\ }"
    done
  }
  
  abort() {
    printf "%s\n" "$1"
    exit 1
  }
  
  chomp() {
    printf "%s" "${1/"$'\n'"/}"
  }
  
  ohai() {
    printf "${tty_blue}==>${tty_bold} %s${tty_reset}\n" "$(shell_join "$@")"
  }
  
  warn() {
    printf "${tty_red}Warning${tty_reset}: %s\n" "$(chomp "$1")"
  }
  
  execute() {
    if [ "$debug" -eq 1 ]; then
      echo "EXEC: $(shell_join "$@")"
    fi
  
    output=$(eval "$@")
  
    if [ "$debug" -eq 1 ]; then
      echo "GOT: $output" | head -1
      echo
    fi
  }
  
  check_logged_in() {
    if [[ ! -f ~/.cloudenvrc ]]; then
      echo
      warn "Not logged in"
      echo
      ohai "Please run: cloudenv login"
      echo
      exit 1
    fi
  }
  
  check_for_project() {
    if [[ ! -f .cloudenv-secret-key ]]; then
      echo
      warn "Couldn't find a cloudenv project in $PWD/.cloudenv-secret-key"
      echo
      ohai "Please run: cloudenv init"
      echo
      ohai "Or cd into the root directory of your app to make env edits"
      echo
      exit 1
    fi
  }
  
  check_can_read_env() {
    execute "curl" "-s" "-H" "\"Authorization: Bearer $(get_bearer)\"" "\"$base_url/api/v1/apps/show.txt?name=$(get_current_app)&environment=$environment&version=$version&lang=cli\"" "|" "grep $environment" "|" "grep read" "|" "wc" "-l" "|" "xargs"
  
    if [ "$output" -eq 0 ]; then
      echo
      warn "Your API key does not have read access to $(get_current_app) ($environment environment)"
      echo
      ohai "Please run: cloudenv login"
      echo
      ohai "Or ask your admin for read permissions"
      echo
      exit 1
    fi
  }
  
  check_can_write_env() {
    execute "curl" "-s" "-H" "\"Authorization: Bearer $(get_bearer)\"" "\"$base_url/api/v1/apps/show.txt?name=$(get_current_app)&environment=$environment&version=$version&lang=cli\"" "|" "grep $environment" "|" "grep write" "|" "wc" "-l" "|" "xargs"
  
    if [ "$output" -eq 0 ]; then
      echo
      warn "Your API key does not have write access to $(get_current_app) ($environment environment)"
      echo
      ohai "Please run: cloudenv login"
      echo
      ohai "Or ask your admin for write permissions"
      echo
      exit 1
    fi
  }
  
  getc() {
    local save_state
    save_state=$(/bin/stty -g)
    /bin/stty raw -echo
    IFS= read -r -n 1 -d '' "$@"
    /bin/stty "$save_state"
  }
  
  version_gt() {
    [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -gt "${2#*.}" ]]
  }
  version_ge() {
    [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -ge "${2#*.}" ]]
  }
  version_lt() {
    [[ "${1%.*}" -lt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -lt "${2#*.}" ]]
  }
  
  if ! command -v curl >/dev/null
  then
    abort "You must install curl before using cloudenv"
  fi
  
  if ! command -v openssl >/dev/null
  then
    abort "You must install openssl before using cloudenv"
  fi
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "login" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_login_usage
    else
      cloudenv_login_command
    fi
  
  elif [[ $action == "init" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_init_usage
    else
      cloudenv_init_command
    fi
  
  elif [[ $action == "merge" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_merge_usage
    else
      cloudenv_merge_command
    fi
  
  elif [[ $action == "edit" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_edit_usage
    else
      cloudenv_edit_command
    fi
  
  elif [[ $action == "source" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_source_usage
    else
      cloudenv_source_command
    fi
  
  elif [[ $action == "show" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_show_usage
    else
      cloudenv_show_command
    fi
  
  elif [[ $action == "raw" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_raw_usage
    else
      cloudenv_raw_command
    fi
  
  elif [[ $action == "decrypt" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_decrypt_usage
    else
      cloudenv_decrypt_command
    fi
  
  elif [[ $action == "push" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_push_usage
    else
      cloudenv_push_command
    fi
  
  elif [[ $action == "run" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_run_usage
    else
      cloudenv_run_command
    fi
  
  elif [[ $action == "upgrade" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_upgrade_usage
    else
      cloudenv_upgrade_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    cloudenv_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
