#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cloudenv_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv - CloudEnv\n"
    echo 
  else
    printf "cloudenv - CloudEnv\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cloudenv [command]\n"
  printf "  cloudenv [command] --help | -h\n"
  printf "  cloudenv --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  login   Login to CloudEnv service"
  echo "  init    Initialize a new project"
  echo "  merge   Merge into CloudEnv"
  echo "  edit    Edit an environmental variable file"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  API_KEY"
    printf "    Set your API key\n"
    echo

  fi
}

# :command.usage
cloudenv_login_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv login - Login to CloudEnv service\n"
    echo 
  else
    printf "cloudenv login - Login to CloudEnv service\n"
    echo 
  fi

  printf "Shortcut: l\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv login\n"
  printf "  cloudenv login --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv login\n"
    echo

  fi
}

# :command.usage
cloudenv_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv init - Initialize a new project\n"
    echo 
  else
    printf "cloudenv init - Initialize a new project\n"
    echo 
  fi

  printf "Shortcut: i\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv init [options]\n"
  printf "  cloudenv init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --name, -n NAME"
    printf "    Name of the project\n"
    echo

  fi
}

# :command.usage
cloudenv_merge_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv merge - Merge into CloudEnv\n"
    echo 
  else
    printf "cloudenv merge - Merge into CloudEnv\n"
    echo 
  fi

  printf "Shortcut: m\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv merge ENVIRONMENT FILENAME\n"
  printf "  cloudenv merge --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    echo
    
    # :argument.usage
    echo "  FILENAME"
    printf "    Target filename of existing env file\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv merge default .env\n"
    printf "  cloudenv merge development .env.dev\n"
    echo

  fi
}

# :command.usage
cloudenv_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv edit - Edit an environmental variable file\n"
    echo 
  else
    printf "cloudenv edit - Edit an environmental variable file\n"
    echo 
  fi

  printf "Shortcut: e\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv edit ENVIRONMENT\n"
  printf "  cloudenv edit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  ENVIRONMENT"
    printf "    Which environment should these variables be accessible in\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cloudenv edit default\n"
    printf "  cloudenv edit staging\n"
    printf "  cloudenv edit production\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions
# :command.function
cloudenv_login_command() {
  # :src/login_command.sh
  echo "# this file is located in 'src/login_command.sh'"
  echo "# code for 'cloudenv login' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cloudenv_init_command() {
  # :src/init_command.sh
  base64 < /dev/urandom | tr -d 'O0Il1+/' | head -c 64 > .cloudenv_secret_key ; echo >> .cloudenv_secret_key
}

# :command.function
cloudenv_merge_command() {
  # :src/merge_command.sh
  echo "# this file is located in 'src/merge_command.sh'"
  echo "# code for 'cloudenv merge' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cloudenv_edit_command() {
  # :src/edit_command.sh
  if [[ "${args[--edit]}" ]]; then
    editor="${EDITOR:-vi}"
    "$editor" "$CONFIG_FILE"
  else
    cyan "# $CONFIG_FILE"
    config_show
  fi
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  login | l )
    action="login"
    shift
    cloudenv_login_parse_requirements "$@"
    shift $#
    ;;    
  
  init | i )
    action="init"
    shift
    cloudenv_init_parse_requirements "$@"
    shift $#
    ;;    
  
  merge | m )
    action="merge"
    shift
    cloudenv_merge_parse_requirements "$@"
    shift $#
    ;;    
  
  edit | e )
    action="edit"
    shift
    cloudenv_edit_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    cloudenv_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_login_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_login_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="login"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_init_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_init_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="init"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --name | -n )
      if [[ $2 && $2 != -* ]]; then
        args[--name]="$2"
        shift
        shift
      else
        printf "%s\n" "--name requires an argument: --name, -n NAME"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_merge_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_merge_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="merge"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[environment]=$1
    shift
  else
    printf "missing required argument: ENVIRONMENT\nusage: cloudenv merge ENVIRONMENT FILENAME\n"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[filename]=$1
    shift
  else
    printf "missing required argument: FILENAME\nusage: cloudenv merge ENVIRONMENT FILENAME\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      elif [[ ! ${args[filename]} ]]; then
        args[filename]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_edit_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_edit_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="edit"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[environment]=$1
    shift
  else
    printf "missing required argument: ENVIRONMENT\nusage: cloudenv edit ENVIRONMENT\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[environment]} ]]; then
        args[environment]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "login" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_login_usage
    else
      cloudenv_login_command
    fi
  
  elif [[ $action == "init" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_init_usage
    else
      cloudenv_init_command
    fi
  
  elif [[ $action == "merge" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_merge_usage
    else
      cloudenv_merge_command
    fi
  
  elif [[ $action == "edit" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_edit_usage
    else
      cloudenv_edit_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    cloudenv_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
