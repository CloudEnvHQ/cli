#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cloudenv_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv - CloudEnv\n"
    echo 
  else
    printf "cloudenv - CloudEnv\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cloudenv [command]\n"
  printf "  cloudenv [command] --help | -h\n"
  printf "  cloudenv --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  download   Download a file"
  echo "  upload     Upload a file"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  API_KEY"
    printf "    Set your API key\n"
    echo

  fi
}

# :command.usage
cloudenv_download_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv download - Download a file\n"
    echo 
  else
    printf "cloudenv download - Download a file\n"
    echo 
  fi

  printf "Shortcut: d\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv download SOURCE [TARGET] [options]\n"
  printf "  cloudenv download --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --force, -f"
    printf "    Overwrite existing files\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  SOURCE"
    printf "    URL to download from\n"
    echo
    
    # :argument.usage
    echo "  TARGET"
    printf "    Target filename (default: same as source)\n"
    echo
    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  DEFAULT_TARGET_LOCATION"
    printf "    Set the default location to download to\n"
    echo
    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  cli download example.com\n"
    printf "  cli download example.com ./output -f\n"
    echo

  fi
}

# :command.usage
cloudenv_upload_usage() {
  if [[ -n $long_usage ]]; then
    printf "cloudenv upload - Upload a file\n"
    echo 
  else
    printf "cloudenv upload - Upload a file\n"
    echo 
  fi

  printf "Shortcut: u\n"
  echo

  printf "Usage:\n"
  printf "  cloudenv upload SOURCE [options]\n"
  printf "  cloudenv upload --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --user, -u USER (required)"
    printf "    Username to use for logging in\n"
    echo
    
    # :flag.usage
    echo "  --password, -p PASSWORD"
    printf "    Password to use for logging in\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  SOURCE"
    printf "    File to upload\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions
# :command.function
cloudenv_download_command() {
  # :src/download_command.sh
  echo "# this file is located in 'src/download_command.sh'"
  echo "# code for 'cli download' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cloudenv_upload_command() {
  # :src/upload_command.sh
  echo "# this file is located in 'src/upload_command.sh'"
  echo "# code for 'cli upload' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  download | d )
    action="download"
    shift
    cloudenv_download_parse_requirements "$@"
    shift $#
    ;;    
  
  upload | u )
    action="upload"
    shift
    cloudenv_upload_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    cloudenv_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_download_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_download_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="download"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    printf "missing required argument: SOURCE\nusage: cloudenv download SOURCE [TARGET] [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force | -f )
      args[--force]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      elif [[ ! ${args[target]} ]]; then
        args[target]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.parse_requirements
cloudenv_upload_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    cloudenv_upload_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="upload"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    printf "missing required argument: SOURCE\nusage: cloudenv upload SOURCE [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  argstring="$*"
  if [[ "$argstring" != *--user* && "$argstring" != *-u* ]]; then
    printf "missing required flag: --user, -u USER\n"
    exit 1
  fi
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --user | -u )
      if [[ $2 && $2 != -* ]]; then
        args[--user]="$2"
        shift
        shift
      else
        printf "%s\n" "--user requires an argument: --user, -u USER"
        exit 1
      fi
      ;;
  
    # :flag.case
    --password | -p )
      if [[ $2 && $2 != -* ]]; then
        args[--password]="$2"
        shift
        shift
      else
        printf "%s\n" "--password requires an argument: --password, -p PASSWORD"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "download" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_download_usage
    else
      cloudenv_download_command
    fi
  
  elif [[ $action == "upload" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cloudenv_upload_usage
    else
      cloudenv_upload_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    cloudenv_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
